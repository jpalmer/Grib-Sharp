@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<!-- style sheets in wwwroot/rss-->
<!-- load d3 - library used for visualization-->
<script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="//d3js.org/topojson.v1.min.js"></script>
<script>
    //My actual script to display the data
    // create SVG part
    var width = 960,
        height = 960,
        scale0 = (width - 1) / 2 / Math.PI;
    var zoom = d3.behavior.zoom()
        .scaleExtent([1, 8])
        .on("zoom", zoomed);
    var projection = d3.geo.mercator();
    var path = d3.geo.path()
        .projection(projection)
        .pointRadius(2)
        ;
    var point =
        {
            "type": "FeatureCollection",
            "features": [
                    @foreach (var value in Model.values)
                    {
                        @:{
                        @:"type": "Feature",
                        @:"properties": {},
                        @:"geometry": {
                        @:"type": "Point",
                        @:"coordinates": [
                            @((value.Long/1000.0).ToString());
                            @: ,
                            @((value.Lat/1000.0).ToString());
                        @:]
                        @if (value != Model.values.Last())
                        { 
                        @:}},
                        }
                        else
                        {
                        @:}}
                        }
                    }
            ]
        };
    var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

    var g = svg.append("g"); //not sure what the g is for

    svg.append("rect")
        .attr("class", "overlay")
        .attr("width", width)
        .attr("height", height);

    svg
        .call(zoom)
        .call(zoom.event);
    //load world data - this is based on data from geocommons.com which should be all public data
    d3.json("world.json", function (error, world) {
        if (error) return console.error(error);
        //now plot the world - nice trick here is that it seems to plot all the land as black by default which is nice and useful for this exercise as we are mostly interested in sea conditions
        g.append("path")
            .datum(topojson.feature(world, world.objects.subunits))
            .attr("d", d3.geo.path().projection(projection));
        //add points - use raw geojson for now
        g.append("path")
            .datum(point)
            .attr("d", path)
            .attr("class", "WindPoint");
    });
    function zoomed() {
        g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    }

    d3.select(self.frameElement).style("height", height + "px");

</script>
Start of the C#

End of the C#