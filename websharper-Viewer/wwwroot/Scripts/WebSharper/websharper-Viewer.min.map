{
"version": 3,
"sourceRoot": "Source",
"sources": ["websharper-Viewer/Remoting.fs", "websharper-Viewer/vector.fs", "websharper-Viewer/Client.fs"],
"sourcesContent": ["namespace Viewer\n\nopen WebSharper\nopen System.Drawing\n\nmodule Server =\n    type Point = //websharper is not at all happy if this type is in a different assembly\n        {Lat : double; Long : double; WindSpeed: double}\n        [<JavaScript>]\n        member x.Test = 1\n    ///Try to get the parsed data\n    [<Rpc>]\n    let GetWind (arg:string) =  \n        let t = Core.readHeader(System.IO.File.OpenRead(arg)).ToArray() |> Array.iter (fun t -> t.Print |> printfn \"%s\")\n        Core.readHeader(System.IO.File.OpenRead(arg)).ToArray() \n        |> Array.filter (fun t -> t.UWind.IsSome && t.UWind.IsSome) // TODO - bug only gets uwind at the moment\n        |> Array.map (fun t -> \n            {Lat = t.Lat; Long = t.Long; \n            WindSpeed = \n             let vx = Option.get t.UWind in\n             let vy = Option.get t.UWind in\n             vx*vx + vy*vy |> sqrt |> double})\n    ///gets topojson world\n    [<Rpc>]\n    let GetWorld () = System.IO.File.ReadAllText(\"World.json\")\n", "namespace Viewer\nopen WebSharper.D3\nopen WebSharper\n[<JavaScript>]\nmodule Vector = \n    let keepinbounds x = \n        if x > 180.0 then x-360.0\n        else if x < 180.0 then x + 360.0\n        else x\n    type Vector = \n        {\n            x : double;\n            y : double;\n        }\n        static member FromPolar r theta = {x = r * cos(theta); y = r * sin(theta)}\n        member x.Length = x.x*x.x+x.y*x.y |> sqrt    \n        member x.Scale l = \n            let mylen = x.Length\n            let scale = l / mylen\n            {x=x.x*scale;y=x.y*scale}\n        member x.Multiply l =\n            {x = x.x * l;y=x.y*l}\n        member x.Add y = \n            {x = x.x + y.x |> keepinbounds;y=x.y+y.y |> keepinbounds}\n        member x.Project (projection:Projection) = \n            projection.Apply (x.x,x.y ) ", "namespace Viewer\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nopen WebSharper.UI.Client\nopen WebSharper.UI.Html\nopen WebSharper.D3\nopen System.Numerics\nopen Viewer.Vector\nopen Server\nopen Viewer.topoJson\n[<JavaScript>]\nmodule Client =\n    let projection = D3.Geo.Mercator().Rotate(180.0,0.0,0.0)\n    let test = {Lat=1.0;Long=1.0; WindSpeed = 1.0}.Test\n\n    type windPoint =\n        {\n            position : Vector;\n            velocity : Vector;\n        }\n        with \n            member x.update = \n                {position = x.position.Add(x.velocity.Multiply(1.0));velocity = x.velocity}\n    type WindInterpolator(points: Server.Point[]) =\n        //first - lets get the xcocrds\n        let lats = points |> Array.map (fun t -> t.Lat) |> Array.distinct |> Array.sort\n        let latmap = new Dictionary<_,_>() //do it this way because the F# dict function doesn't play nice with websharper\n        do ( lats |> Array.iteri(fun i t -> latmap.Add (t,i)))\n        let longs = points |> Array.map (fun t -> t.Long) |> Array.distinct |> Array.sort\n        let longmap = new Dictionary<_,_>()\n        do ( longs |> Array.iteri(fun i t -> longmap.Add (t,i)))\n        //now lets create our wind vector map - now we have a 2D array\n        let Data = Array2D.zeroCreate (lats.Length) (longs.Length)\n        do points |> Array.iter(fun p -> Data.[latmap.[p.Lat],longmap.[p.Long]] <- {x=p.WindSpeed;y=0.0} )\n        let points = points |> Array.map(fun t -> {position = {x=t.Long/1000.0;y=t.Lat/1000.0}; velocity = {x=t.WindSpeed;y=1.0}})\n        member x.Points = points\n    let Animate (selection:Selection<windPoint>) = \n        let getlength (t:windPoint) =\n            let sx,sy = t.position.Project projection\n            let ex,ey = t.update.position.Project projection\n            (sx-ex)*(sx-ex)+(sy-ey)*(sy-ey) |> sqrt\n\n        selection\n            .Attr(\"x1\",fun (t:windPoint) -> t.position.Project projection |> fst)\n            .Attr(\"y1\",fun (t:windPoint) -> t.position.Project projection |> snd)\n            .Attr(\"x2\",fun (t:windPoint) -> t.update.position.Project projection |> fst)\n            .Attr(\"y2\",fun (t:windPoint) -> t.update.position.Project projection |> snd)\n            .Attr(\"stroke\",\"black\")\n            .Attr(\"stroke-dasharray\",fun t -> let len = (getlength t).ToString()\n                                              len + \" \" + len)\n            .Attr(\"stroke-dashoffset\", fun t -> getlength t)\n            .Transition()\n            .Duration(2000)\n            .Ease(\"linear\")\n            .Attr(\"stroke-dashoffset\", 0);\n            (*\n            .Transition()\n                .Ease(\"linear\")\n                .Delay(100)\n                .Duration(1000)\n                *)\n            |> ignore\n        ()\n    let topojson : ITopoJson =\n        JS.Global?topojson\n    let rgb (point: Server.Point) = \n        let speed = point.WindSpeed |> int\n        sprintf \"rgb(%i,%i,%i)\" speed speed speed\n    let Main () =\n        let world = WebSharper.Json.Parse <| Server.GetWorld()\n        let rvInput = Var.Create \"\"\n\n        let width = 2000\n        let height = 500\n        let svg = D3.Select(\"#map\").Append(\"svg\")\n                    .Attr(\"width\", width)\n                    .Attr(\"height\", height)\n\n        let g = svg.Append(\"g\"); //not sure what the g is for but it makes things work\n        g.Append(\"path\")\n     \n            .Datum(topojson.feature(world, world?objects?subunits))\n            .Attr(\"d\", D3.Geo.Path().Projection(projection)) |> ignore \n        let submit = Submitter.CreateOption rvInput.View\n        let data = Server.GetWind \"Pacific.wind.7days.grb\"\n        let path = D3.Geo.Path().Projection(projection).PointRadius(2.)\n\n        let zoomed = new System.Action(fun  _ -> g.Attr(\"transform\", \"translate(\"+D3.Event?translate+\")scale(\" + D3.Event?scale + \")\") |> ignore)\n        let zoom = D3.Behavior.Zoom().ScaleExtent(1., 8.).On(ZoomType.Zoom, zoomed)\n        svg.Call(As<Function> zoom) |> ignore       \n        let TopoJsonData = \n            {\n                ``type`` = \"FeatureCollection\";\n                features = data |> Array.map (fun p ->\n                    {\n                        ``type`` = \"Feature\";\n                        geometry =\n                            {\n                                ``type`` = \"Point\" ;\n                                coordinates = [|p.Long/1000.0;p.Lat/1000.0|]\n                            }               \n                    })\n            }\n        let vReversed =\n            submit.View.MapAsync(function\n                | None -> async { return \"\" }\n                | Some input -> \n                    let RNG = new System.Random()\n                    let interpolator = WindInterpolator(data).Points |> Array.filter (fun t -> RNG.NextDouble() < 0.1)\n                    g.SelectAll(\"line\")\n                     .Data(interpolator)\n                     .Enter()\n                     .Append(\"line\")\n                     .Call(Animate)\n                     |> ignore\n                     \n                    g.SelectAll(\"circle\").Data(data)\n                     .Enter()\n                     .Append(\"circle\")\n                     .Attr(\"cx\",fun (d:Server.Point) -> (projection.Apply (d.Long/1000.0,d.Lat/1000.0 ) |> fst ))\n                     .Attr(\"cy\",fun (d:Server.Point) -> (projection.Apply (d.Long/1000.0,d.Lat/1000.0 ) |> snd ))\n                     .Attr(\"fill\",fun d -> rgb d )\n                     .Attr(\"r\",fun d -> \"0.3px\" )\n                     |> ignore\n\n\n                    async {return \"\"}\n            )\n        div [] [\n            Doc.Input [] rvInput\n            Doc.Button \"Send\" [] submit.Trigger\n            hr [] []\n            h4 [attr.``class`` \"text-muted\"] [text \"The server responded:\"]\n            div [attr.``class`` \"jumbotron\"] [h1 [] [textView vReversed]]\n        ]\n"],
"names": [],
"mappings": "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"
}
