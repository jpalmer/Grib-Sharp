{
"version": 3,
"sourceRoot": "Source",
"sources": ["websharper-Viewer/Client.fs"],
"sourcesContent": ["namespace websharper_Viewer\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nopen WebSharper.UI.Client\nopen WebSharper.UI.Html\nopen WebSharper.D3\n[<JavaScript>]\nmodule Client =\n    type topoJsonPointDetails = \n        {\n            ``type``: string;\n            coordinates : double[];\n        }\n    type topoJsonPoint=\n        {\n            ``type`` : string;\n            geometry : topoJsonPointDetails\n        }\n   \n    type topoJsonParentObject =\n        {\n            ``type``: string;\n            features : topoJsonPoint[];\n        }\n    [<Name \"\">]\n    type ITopoJson =\n        abstract feature : topology: obj * geoObject: obj -> obj\n        abstract mesh : topology: obj * geoObject: obj * filter: (obj * obj -> bool) -> obj\n\n    let topojson : ITopoJson =\n        JS.Global?topojson\n    let projection = D3.Geo.Mercator()\n    let Main () =\n        let world = WebSharper.Json.Parse <| Server.GetWorld()\n        let rvInput = Var.Create \"\"\n\n        let width = 500\n        let height = 500\n        let svg = D3.Select(\"#map\").Append(\"svg\")\n                    .Attr(\"width\", width)\n                    .Attr(\"height\", height)\n\n        let g = svg.Append(\"g\"); //not sure what the g is for\n        g.Append(\"path\")\n            .Datum(topojson.feature(world, world?objects?subunits))\n            .Attr(\"d\", D3.Geo.Path().Projection(projection)) |> ignore \n        let submit = Submitter.CreateOption rvInput.View\n        let data = Server.GetWind \"Pacific.wind.7days.grb\"\n        let path = D3.Geo.Path().Projection(projection).PointRadius(2.)\n        let zoomed = new System.Action(fun () -> g.Attr(\"transform\",\"translate(\" + D3.Event?Translate + \")scale(\" + D3.Event?scale + \")\") |> ignore)\n        let zoom =new System.Action<_>(fun  _ -> D3.Behavior.Zoom().ScaleExtent(1.,8.).On(ZoomType.Zoom,zoomed) |> ignore)\n        svg.Call(zoom) |> ignore\n        let TopoJsonData = \n            {\n                ``type`` = \"FeatureCollection\";\n                features = data |> Array.map (fun p ->\n                    {\n                        ``type`` = \"Feature\";\n                        geometry =\n                            {\n                                ``type`` = \"Point\" ;\n                                coordinates = [|p.Long/1000.0;p.Lat/1000.0|]\n                            }               \n                    })\n            }\n        let vReversed =\n            submit.View.MapAsync(function\n                | None -> async { return \"\" }\n                | Some input -> \n                    g.Append(\"path\")\n                        .Datum(TopoJsonData)\n                        .Attr(\"d\", path) |> ignore\n                    async {return \"\"}\n            )\n        div [] [\n            Doc.Input [] rvInput\n            Doc.Button \"Send\" [] submit.Trigger\n            hr [] []\n            h4 [attr.``class`` \"text-muted\"] [text \"The server responded:\"]\n            div [attr.``class`` \"jumbotron\"] [h1 [] [textView vReversed]]\n        ]\n"],
"names": [],
"mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G,AAmDiD,CAAC,M,AAAM,WAAW,C,AAAC,YAAY,C,AAAG,QAAQ,U,AAAU,C,AAAG,SAAS,C,AAAG,QAAQ,M,AAAM,C,AAAG,GAAG,C,AAAW,C;;Q,AAhB/H,WAAyB,0GAAiB,C,AAAA,C;U,AACxC,eAAW,EAAE,C,AAAA,C;M,AAIjB,UAAU,MAAM,C,AAAC,Q,AAAQ,KAAK,C,AAAC,M,AACvB,OAAO,C,AAAE,GAAK,C,AAAC,M,AACf,QAAQ,C,AAAE,GAAM,C,AAAC,C;I,AAE3B,GAAG,Q,AAAQ,GAAG,C,AAAC,C;E,AACvB,CAAC,Q,AAAQ,MAAM,C,AAAC,O,AACL,iBAAQ,S,AAAS,KAAK,C,AAAE,KAAK,Q,AAAQ,S,AAAS,C,AAAC,C,AAAC,M,AACjD,GAAG,C,AAAE,UAAa,Y,AAAY,mBAAU,C,AAAC,C,AAAW,C;S,AACjD,uBAAuB,OAAO,W,AAAK,C,AAAA,C;O,AACrC,sGAAe,wBAAwB,E,AAAA,C;O,AACvC,UAAa,Y,AAAY,mBAAU,C,AAAC,a,AAAa,CAAE,C,AAAC,C;E,AAG/D,GAAG,M,AAAM;;GADgC,eAAkB,c,AAAa,CAAE,C,AAAC,CAAE,E,AAAC,I,AAAI,MAAa,C,AAAC,MAAM,C,AAAW,C;G,AACpG,E;e,AAET,yBACe,mBAAmB,C,AACnB,WAAQ;;UACf,kBACe,SAAS,C,AAEhB,yBACe,OAAO,C,AACJ,CAAE,CAAM,K,AAAA,C,AAAC,IAAM,C,AAAC,CAAK,I,AAAA,C,AAAC,IAAM,C,AAAE,C,AAC/C,C,AACR,C;G,AAAC,C,AARa,IAQb,C,AAAA,C,AACT,C;Y,AAED,cAAqB;;;UAAA,eAAQ,E,AAGrB,CAAC,Q,AAAQ,MAAM,C,AAAC,O,AACL,YAAY,C,AAAC,M,AACd,GAAG,C,AAAE,IAAI,C,AAAW,G,AAC9B,IAAK,mB,AAAE;;WAAA,mBAAO,EAAE,C,AAAA,C;I,AAAA,C,AANK,G,AAAR,IACP,IAAK,C,AAAL,kBAAQ;;WAAA,mBAAO,EAAE,C,AAAA,C;I,AAAA,C,AAAZ,C,AAKM,C;G,AAAA,C,AANzB,MAAM,K,AAAK,C,AAOV,C;+B,AAED,aAAa,OAAO,C,AAAA,C,AACpB,WAAW,MAAM,I,AAAI;;GAAA,MAAc,U,AAAA,C;G,AAAA,C,AAAA,C,AACnC,uBAAQ,C,AACR,kBAAI,yBAAe,YAAY,C,AAAA,G,AAAG,aAAK,uBAAuB,C,AAAA,E,AAAC,C,AAC/D,mBAAK,yBAAe,WAAW,C,AAAA,G,AAAG,qBAAO,aAAS,SAAS,C,AAAA,E,AAAC,E,AAAC,G;;;;;;;;;;;;;;;gB,AAjDjE,IAAS,S,AAAS,C;kB,AACL,cAAiB,C;;;"
}
